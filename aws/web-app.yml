AWSTemplateFormatVersion: 2010-09-09

Parameters:

  Env:
    Type: String
  AppName:
    Type: String
    Description: Small letters and dashes (-)
Resources:
  # Laravel S3 storage bucket
  Storage:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-laravel-bref-storage-${AWS::AccountId}-${Env}
  # Laravel public assets usually in public/js{css...}
  Assets:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub ${AppName}-laravel-bref-assets-${AWS::AccountId}-${Env}
  AssetsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref Assets
      PolicyDocument:
        Statement:
          - Action:
              - s3:GetObject
            Effect: Allow
            Resource: !Sub arn:aws:s3:::${Assets}/*
            Principal:
              CanonicalUser: !GetAtt AssetsBucketCFOAI.S3CanonicalUserId
  AssetsBucketCFOAI:
    Type: 'AWS::CloudFront::CloudFrontOriginAccessIdentity'
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Ref Assets

  RestApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      ProtocolType: HTTP
      Target: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/arn:aws:lambda:${AWS::Region}:${AWS::AccountId}:function:${LaravelBref}/invocations
      Name: !Sub ${AppName}-laravel-bref-${Env}
  RestApiConfig:
    Type: AWS::ApiGatewayV2::ApiGatewayManagedOverrides
    Properties: 
      ApiId: !Ref RestApi
      Stage: 
        AccessLogSettings:
          DestinationArn: !GetAtt RestApiLogGroup.Arn
          Format: '$context.identity.sourceIp - - [$context.requestTime] "$context.httpMethod $context.routeKey $context.path $context.protocol" $context.status $context.responseLength $context.requestId'
  RestApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/http-api/${AppName}-laravel-bref-${Env}"
      RetentionInDays: 30
  RestApiLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Sub ${LaravelBref}
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RestApi}/*

  LaravelBref:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AppName}-laravel-bref-${Env}
      Layers:
        - arn:aws:lambda:us-east-1:209497400698:layer:php-74-fpm:17
      Handler: "public/index.php"
      Runtime: "provided.al2"
      MemorySize: 256
      Timeout: 28
      Environment:
        Variables:
          ENV: !Ref Env
          QUEUE_CONNECTION: sqs
          SQS_QUEUE: !Ref LaravelBrefQueueDefault
      Role: !GetAtt LambdaRole.Arn
      Code: src/bref.zip
  LaravelBrefLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LaravelBref}"
      RetentionInDays: 30

  LaravelBrefConsole:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AppName}-laravel-bref-console-${Env}
      Layers:
        - arn:aws:lambda:us-east-1:209497400698:layer:php-74:17
        - arn:aws:lambda:us-east-1:209497400698:layer:console:31
      Handler: "artisan"
      Runtime: "provided.al2"
      MemorySize: 256
      Timeout: 28
      Environment:
        Variables:
          ENV: !Ref Env
          QUEUE_CONNECTION: sqs
          SQS_QUEUE: !Ref LaravelBrefQueueDefault
      Role: !GetAtt LambdaRole.Arn
      Code: src/bref.zip
  LaravelBrefConsoleLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LaravelBrefConsole}"
      RetentionInDays: 30

  LaravelBrefEventWorker:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AppName}-laravel-bref-eventworker-${Env}
      Layers:
        - arn:aws:lambda:us-east-1:209497400698:layer:php-74:17
      Handler: "event.php"
      DeadLetterConfig:
        TargetArn: !GetAtt DeadLetterQueueEvent.Arn
      Runtime: "provided.al2"
      MemorySize: 256
      Timeout: 28
      Environment:
        Variables:
          ENV: !Ref Env
          QUEUE_CONNECTION: sqs
          SQS_QUEUE: !Ref LaravelBrefQueueDefault
      Role: !GetAtt LambdaRole.Arn
      Code: src/bref.zip
  LaravelBrefEventworkerLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub "/aws/lambda/${LaravelBrefEventWorker}"
      RetentionInDays: 30
  DeadLetterQueueEvent:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # maximum retention: 14 days

  LaravelBrefQueueWorker:
    Type: "AWS::Lambda::Function"
    Properties:
      FunctionName: !Sub ${AppName}-laravel-bref-queueworker-${Env}
      Layers:
        - arn:aws:lambda:us-east-1:209497400698:layer:php-74:17
      Handler: "worker.php"
      Runtime: "provided.al2"
      MemorySize: 256
      Timeout: 28
      Environment:
        Variables:
          ENV: !Ref Env
          QUEUE_CONNECTION: sqs
          SQS_QUEUE: !Ref LaravelBrefQueueDefault
      Role: !GetAtt LambdaRole.Arn
      Code: src/bref.zip

  LaravelBrefQueuePoller:
    DependsOn: LaravelBrefQueueWorker
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      Enabled: true
      EventSourceArn: !GetAtt LaravelBrefQueueDefault.Arn
      FunctionName: !GetAtt LaravelBrefQueueWorker.Arn

  LaravelBrefQueueDefault:
    Type: AWS::SQS::Queue
    Properties:
      RedrivePolicy:
        maxReceiveCount: 3 # jobs will be retried up to 3 times
        deadLetterTargetArn: !GetAtt DeadLetterQueueWorker.Arn
  DeadLetterQueueWorker:
    Type: AWS::SQS::Queue
    Properties:
      MessageRetentionPeriod: 1209600 # maximum retention: 14 days

  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      ManagedPolicyArns:
        - "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - "lambda.amazonaws.com"
            Action:
              - "sts:AssumeRole"

  LambdaRolePolicy:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: LambdaRolePolicy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action: "s3:*"
            Resource: "*"
          - Effect: Allow
            Action: "sqs:*"
            Resource: "*"
      Roles:
        - !Ref LambdaRole

  LaravelCloudfrontDistribution:
    Type: AWS::CloudFront::Distribution
    Properties:
      DistributionConfig:
        Comment: !Sub ${AppName}-laravel-bref-${Env}
        PriceClass: PriceClass_100
        DefaultRootObject: ""
        Enabled: true
        Origins:
          - Id: Lambda
            DomainName: !Sub "${RestApi}.execute-api.us-east-1.amazonaws.com"
            CustomOriginConfig:
              OriginProtocolPolicy: https-only
        DefaultCacheBehavior:
          AllowedMethods: [GET, HEAD, OPTIONS, PUT, POST, PATCH, DELETE]
          TargetOriginId: Lambda
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 4135ea2d-6df8-44a3-9df3-4b5a84be39ad # AWS provided cache policy template
